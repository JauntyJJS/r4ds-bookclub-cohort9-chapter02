---
title: |
  R4DS Chapter 2 <br>
  Data Visualisation
author: Jeremy Selva <br> [`r fontawesome::fa(name = "github")`](https://github.com/JauntyJJS) [`r fontawesome::fa(name = "linkedin")`](https://www.linkedin.com/in/jeremy-selva-085b9112a/) [`r fontawesome::fa(name = "link")`](https://jeremy-selva.netlify.app/) [`r fontawesome::fa(name = "twitter")`](https://twitter.com/JauntyJJS)
format:
  revealjs:
    theme: [dark, custom.scss]
    controls: true
    slide-number: true
    scrollable: true
    preview-links: auto
---

```{r setup, include=FALSE}
library(fontawesome)
```

## Introduction

This chapter shows how to visualise data using `ggplot2`. Ensure these libraries are available.

```{r}
#| echo: true

# Needed in the book
library(tidyverse)
library(palmerpenguins)
library(ggthemes)

# For the extra slides
library(scales)
library(glue)
library(ggfittext)
library(ggtext)
```

## `penguins` data

The `penguins` data has 344 penguins observations with 8 columns.

```{r}
#| echo: true
print(penguins, width = Inf)

```

## `penguins` data

Among the variables in penguins are:

1. `species`: a penguin’s species (Adelie, Chinstrap, or Gentoo).

2. `flipper_length_mm`: length of a penguin’s flipper, in millimeters.

3. `body_mass_g`: body mass of a penguin, in grams.

## `penguins` data

We can take a closer look using  `dplyr::glimpse()`

```{r}
#| echo: true
dplyr::glimpse(penguins)
```

We try to find a relationship between flipper lengths and body masses for each penguins species.

## Creating a `ggplot`

The first argument `data` is to tell `ggplot` which the dataset to use in the graph. It gives an empty graph at first.

```{r}
#| echo: true
#| output-location: column


ggplot2::ggplot(data = penguins)
```

## Creating a `ggplot`

The next argument `mapping` tells `ggplot` what variables in `penguins` holds the x and y axis. The `mapping` argument must be an output of the `ggplot2::aes` function.

```{r}
#| echo: true
#| output-location: column

ggplot2::ggplot(
  data = penguins,
  mapping = ggplot2::aes(
      x = flipper_length_mm, 
      y = body_mass_g
      )
)
```

## Creating a `ggplot`

We can see that flipper lengths and body mass are displayed in the x and y axis. However, we cannot see the penguin data in the plot.

```{r}
#| echo: true
#| output-location: column

ggplot2::ggplot(
  data = penguins,
  mapping = ggplot2::aes(
      x = flipper_length_mm, 
      y = body_mass_g
      )
)
```

## Creating a `ggplot`

We need to specify using `geom_` what the data should be represented as a 

* bar `geom_bar()`
* line `geom_line()`
* boxplot `geom_boxplot()`
* scatterplots `geom_point()`

## Creating a `ggplot`

Here is a `geom_point` example.

```{r}
#| echo: true
#| output-location: column

ggplot2::ggplot(
  data = penguins,
  mapping = ggplot2::aes(
      x = flipper_length_mm, 
      y = body_mass_g
      )
)
```

## Creating a `ggplot`

Adding `geom_point()` gives us the points. We can see that penguins with longer flippers are generally larger in their body mass.

```{r}
#| echo: true
#| warning: true
#| output-location: column

ggplot2::ggplot(
  data = penguins,
  mapping = ggplot2::aes(
      x = flipper_length_mm, 
      y = body_mass_g
      )
) + 
ggplot2::geom_point()
```

## Creating a `ggplot`

The warning indicates that two of the penguins have missing body mass and/or flipper length values.

```{r}
penguins |> 
  dplyr::filter(
    is.na(flipper_length_mm) | is.na(body_mass_g)
  ) |>
  print(width = Inf)
```

## Creating a `ggplot`

In general, we can see that penguins with longer flippers are generally larger in their body mass. 

Does this applies for all species (Adelie, Chinstrap and Gentoo) ? 

We can do this by representing species with different colored points.

## Creating a `ggplot`

To do this, we modify the `aes` function by adding `color = species`.

```{r}
#| echo: true
#| warning: true
#| output-location: column

ggplot2::ggplot(
  data = penguins,
  mapping = ggplot2::aes(
      x = flipper_length_mm, 
      y = body_mass_g,
      color = species
      )
) + 
ggplot2::geom_point()
```

## Creating a `ggplot`

This allows `ggplot` to assign a unique colour for each species and provides a legend.

```{r}
#| echo: true
#| warning: true
#| output-location: column

ggplot2::ggplot(
  data = penguins,
  mapping = ggplot2::aes(
      x = flipper_length_mm, 
      y = body_mass_g,
      color = species
      )
) + 
ggplot2::geom_point()
```

## Creating a `ggplot`

We now wish to add a smooth curve for each species. this is done by adding `geom_smooth(method = "lm")`

```{r}
#| echo: true
#| warning: true
#| output-location: column

ggplot2::ggplot(
  data = penguins,
  mapping = ggplot2::aes(
      x = flipper_length_mm, 
      y = body_mass_g,
      color = species
      )
) + 
ggplot2::geom_point() +
ggplot2::geom_smooth(method = "lm")
```

## Creating a `ggplot`

Instead of a line for all species, how do we add only one smooth curve to describe the relationship for all species ?

```{r}
#| echo: true
#| warning: true
#| output-location: column

ggplot2::ggplot(
  data = penguins,
  mapping = ggplot2::aes(
      x = flipper_length_mm, 
      y = body_mass_g,
      color = species
      )
) + 
ggplot2::geom_point() +
ggplot2::geom_smooth(method = "lm")
```

## Creating a `ggplot`

We need to agree that the following are equivalent.

:::: {.columns}

::: {.column width="50%"}

```{r}
#| echo: true
#| eval: false

ggplot2::ggplot(
  data = penguins,
  mapping = ggplot2::aes(
      x = flipper_length_mm, 
      y = body_mass_g,
      color = species
      )
) + 
ggplot2::geom_point() +
ggplot2::geom_smooth(method = "lm")
```

:::

::: {.column width="50%"}

```{r}
#| echo: true
#| eval: false

ggplot2::ggplot() + 
ggplot2::geom_point(
  data = penguins,
  mapping = ggplot2::aes(
      x = flipper_length_mm, 
      y = body_mass_g,
      color = species)
) +
ggplot2::geom_smooth(
  data = penguins,
  mapping = ggplot2::aes(
      x = flipper_length_mm, 
      y = body_mass_g,
      color = species),
  method = "lm")
```

:::

::::

## Creating a `ggplot`

Because we want to draw a smooth curve along all species, we need to remove the `color = species` in the `mapping` argument of `geom_smooth`.

```{r}
#| echo: true
#| warning: true
#| output-location: column

ggplot2::ggplot() + 
ggplot2::geom_point(
  data = penguins,
  mapping = ggplot2::aes(
      x = flipper_length_mm, 
      y = body_mass_g,
      color = species)
) +
ggplot2::geom_smooth(
  data = penguins,
  mapping = ggplot2::aes(
      x = flipper_length_mm, 
      y = body_mass_g),
  method = "lm")
```

## Creating a `ggplot`

We put what mapping arguments that are common in `geom_point` and `geom_smooth` back to `ggplot`.

:::: {.columns}

::: {.column width="50%"}

```{r}
#| echo: true
#| eval: false

ggplot2::ggplot() + 
ggplot2::geom_point(
  data = penguins,
  mapping = ggplot2::aes(
      x = flipper_length_mm, 
      y = body_mass_g,
      color = species)
) +
ggplot2::geom_smooth(
  data = penguins,
  mapping = ggplot2::aes(
      x = flipper_length_mm, 
      y = body_mass_g),
  method = "lm")
```

:::

::: {.column width="50%"}

```{r}
#| echo: true
#| eval: false

ggplot2::ggplot(
  data = penguins,
  mapping = ggplot2::aes(
     x = flipper_length_mm, 
     y = body_mass_g
    )
) + 
ggplot2::geom_point(
  mapping = ggplot2::aes(
      color = species)
) +
ggplot2::geom_smooth(
  method = "lm")
```

:::

::::

## Creating a `ggplot`

Here is the simplified code.

```{r}
#| echo: true
#| warning: true
#| output-location: column
#| 
ggplot2::ggplot(
  data = penguins,
  mapping = ggplot2::aes(
     x = flipper_length_mm, 
     y = body_mass_g
    )
) + 
ggplot2::geom_point(
  mapping = ggplot2::aes(
      color = species)
) +
ggplot2::geom_smooth(
  method = "lm")
```

## Creating a `ggplot`

Besides colour, we can create a different shape for each species.

```{r}
#| echo: true
#| warning: true
#| output-location: column

ggplot2::ggplot(
  data = penguins,
  mapping = ggplot2::aes(
     x = flipper_length_mm, 
     y = body_mass_g
    )
) + 
ggplot2::geom_point(
  mapping = ggplot2::aes(
      color = species,
      shape = species)
) +
ggplot2::geom_smooth(
  method = "lm")
```

## Creating a `ggplot`

Next, we use `labs` to label the plot.

```{r}
#| echo: true
#| warning: true
#| output-location: column

ggplot2::ggplot(
  data = penguins,
  mapping = ggplot2::aes(
     x = flipper_length_mm, 
     y = body_mass_g
    )
) + 
ggplot2::geom_point(
  mapping = ggplot2::aes(
      color = species,
      shape = species)
) +
ggplot2::geom_smooth(
  method = "lm") +
ggplot2::labs(
    title = "Body mass and flipper length",
    subtitle = "Dimensions for Adelie, Chinstrap, and Gentoo Penguins",
    x = "Flipper length (mm)", 
    y = "Body mass (g)",
    color = "Species", 
    shape = "Species"
  ) 
```

## Creating a `ggplot`

Lastly, we add `scale_color_colorblind` to improve the colour palette to be colour-blind safe.

```{r}
#| echo: true
#| warning: true
#| output-location: column

ggplot2::ggplot(
  data = penguins,
  mapping = ggplot2::aes(
     x = flipper_length_mm, 
     y = body_mass_g
    )
) + 
ggplot2::geom_point(
  mapping = ggplot2::aes(
      color = species,
      shape = species)
) +
ggplot2::geom_smooth(
  method = "lm") +
ggplot2::labs(
    title = "Body mass and flipper length",
    subtitle = "Dimensions for Adelie, Chinstrap, and Gentoo Penguins",
    x = "Flipper length (mm)", 
    y = "Body mass (g)",
    color = "Species", 
    shape = "Species"
  ) +
ggthemes::scale_color_colorblind()
```

## Creating a `ggplot`

In Google Chrome, we can go to Developer's mode (Press F12), press Three Dots, press More tools, press Rendering, scroll down to Emulate vision deficiencies and make changes.

More info in [Anna Monus's Blog](https://webdesign.tutsplus.com/designing-for-color-blindness-with-chrome-devtools--cms-35827a)

```{r}
#| echo: false
#| warning: false

ggplot2::ggplot(
  data = penguins,
  mapping = ggplot2::aes(
     x = flipper_length_mm, 
     y = body_mass_g
    )
) + 
ggplot2::geom_point(
  mapping = ggplot2::aes(
      color = species,
      shape = species)
) +
ggplot2::geom_smooth(
  method = "lm") +
ggplot2::labs(
    title = "Body mass and flipper length",
    subtitle = "Dimensions for Adelie, Chinstrap, and Gentoo Penguins",
    x = "Flipper length (mm)", 
    y = "Body mass (g)",
    color = "Species", 
    shape = "Species"
  ) +
ggthemes::scale_color_colorblind()
```

## Exercise 2.2.5

How many rows are in `penguins`? How many columns?

```{r}
#| echo: true

glue::glue("
  There are {nrow(penguins)} rows and {ncol(penguins)} columns in the penguin data set
  "
)
```

## Exercise 2.2.5

What does the `bill_depth_mm` variable in the `penguins` data frame describe? Read the help for ?penguins to find out.

```{r}
#| echo: true
#| eval: false

?penguins

```

```{=html}
<iframe width="1000" height="400" src="https://allisonhorst.github.io/palmerpenguins/reference/penguins.html" title="Penguin Documentation" ></iframe>
```

## Exercise 2.2.5

Make a scatterplot of `bill_depth_mm` vs. `bill_length_mm`. Describe the relationship between these two variables.

```{r}
#| echo: true
#| warning: true
#| output-location: column

ggplot2::ggplot(
  data = penguins, 
  mapping = ggplot2::aes(
    x = .data[["bill_depth_mm"]], 
    y = .data[["bill_length_mm"]])
) + 
  ggplot2::geom_point() +
ggplot2::theme(
  axis.title.y = ggplot2::element_text(angle = 0)
) +
ggplot2::labs(
    title = "Bill depth vs Bill Length",
    subtitle = "Small positive correaltion between bill depth and length.",
    x = "Bill Length (mm)", 
    y = "Bill Depth\n(mm)"
  ) 
```

## Exercise 2.2.5

What happens if you make a scatterplot of `species` vs. `bill_depth_mm` ?

```{r}
#| echo: true
#| warning: true
#| output-location: column

ggplot2::ggplot(
  data = penguins, 
  mapping = ggplot2::aes(
    x = .data[["bill_length_mm"]], 
    y = .data[["species"]])
) + 
  ggplot2::geom_point() +
ggplot2::theme(
  axis.title.y = ggplot2::element_text(angle = 0)
) +
ggplot2::labs(
    title = "Species vs Bill Length",
    subtitle = "We get a dot plot but it is hard to see the distribution.",
    x = "Bill Depth (mm)", 
    y = "Species"
  ) 
```

## Exercise 2.2.5

What might be a better choice of geom ?

```{r}
#| echo: true
#| warning: true
#| output-location: column

ggplot2::ggplot(
  data = penguins, 
  mapping = ggplot2::aes(
    x = .data[["bill_length_mm"]], 
    y = .data[["species"]])
) + 
  ggplot2::geom_boxplot() +
ggplot2::theme(
  axis.title.y = ggplot2::element_text(angle = 0)
) +
ggplot2::labs(
    title = "Species vs Bill Length",
    subtitle = "A box plot may be better.",
    x = "Bill Depth (mm)", 
    y = "Species"
  ) 
```

## Exercise 2.2.5

Why does the following give an error and how would you fix it?

```{r}
#| echo: true
#| error: true
#| warning: true
#| output-location: column

ggplot2::ggplot(data = penguins) + 
  ggplot2::geom_point()
```

## Exercise 2.2.5

We need to set mapping parameters using the `aes` function to tell `ggplot` which columns in `penguins` are used for the x or y axis respectively.

```{r}
#| echo: true
#| warning: true
#| output-location: column

ggplot(data = penguins) + 
  geom_point(
    mapping = ggplot2::aes(
    x = .data[["bill_depth_mm"]], 
    y = .data[["bill_length_mm"]]  
  )
)
```

## Exercise 2.2.5

What does the `na.rm` argument do in `geom_point()`? What is the default value of the argument? Create a scatterplot where you successfully use this argument set to TRUE.

```{r}
#| echo: true
#| eval: false

?ggplot2::geom_point()

```

```{=html}
<iframe width="1000" height="400" src="https://ggplot2.tidyverse.org/reference/geom_point.html" title="geom_point Documentation" ></iframe>
```

## Exercise 2.2.5

Warning message is removed.

```{r}
#| echo: true
#| warning: true
#| output-location: column

ggplot2::ggplot(
  data = penguins, 
  mapping = ggplot2::aes(
    x = .data[["bill_depth_mm"]], 
    y = .data[["bill_length_mm"]])
) + 
  ggplot2::geom_point(
    na.rm = TRUE,
) +
ggplot2::theme(
  axis.title.y = ggplot2::element_text(angle = 0)
) +
ggplot2::labs(
    title = "Bill depth vs Bill Length",
    subtitle = "Small positive correaltion between bill depth and length.",
    x = "Bill Length (mm)", 
    y = "Bill Depth\n(mm)"
  ) 

```

## Exercise 2.2.5

Add the following caption to the plot you made in the previous exercise: “Data come from the `palmerpenguins` package.” Hint: Take a look at the documentation for `labs()`.

```{r}
#| echo: true
#| warning: true
#| output-location: column

ggplot2::ggplot(
  data = penguins, 
  mapping = ggplot2::aes(
    x = .data[["bill_depth_mm"]], 
    y = .data[["bill_length_mm"]])
) + 
  ggplot2::geom_point(
    na.rm = TRUE,
) +
ggplot2::theme(
  axis.title.y = ggplot2::element_text(angle = 0)
) +
ggplot2::labs(
    title = "Bill depth vs Bill Length",
    subtitle = "Small positive correaltion between bill depth and length.",
    caption = "Data come from the palmerpenguins package.",
    x = "Bill Length (mm)", 
    y = "Bill Depth\n(mm)"
  ) 

```

## Exercise 2.2.5

Add the following caption to the plot you made in the previous exercise: “Data come from the `palmerpenguins` package.” Hint: Take a look at the documentation for `labs()`.

```{r}
#| echo: true
#| warning: true
#| output-location: column

ggplot2::ggplot(
  data = penguins, 
  mapping = ggplot2::aes(
    x = .data[["bill_depth_mm"]], 
    y = .data[["bill_length_mm"]])
) + 
  ggplot2::geom_point(
    na.rm = TRUE,
) +
ggplot2::theme(
  axis.title.y = ggplot2::element_text(angle = 0)
) +
ggplot2::labs(
    title = "Bill depth vs Bill Length",
    subtitle = "Small positive correaltion between bill depth and length.",
    caption = "Data come from the palmerpenguins package.",
    x = "Bill Length (mm)", 
    y = "Bill Depth\n(mm)"
  ) 

```

## Exercise 2.2.5

Image replication

```{r}
#| echo: true
#| warning: true
#| output-location: column

ggplot2::ggplot(
  data = penguins, 
  mapping = ggplot2::aes(
    x = .data[["flipper_length_mm"]], 
    y = .data[["body_mass_g"]])
  ) + 
  ggplot2::geom_point(
    mapping = ggplot2::aes(
      color = .data[["bill_depth_mm"]]
    )
  ) +
  ggplot2::geom_smooth()

```

## Exercise 2.2.5

What does `se = FALSE` in `geom_smooth` do ? It plots the smooth line without confidence interval.

```{r}
#| echo: true
#| warning: true
#| output-location: column

ggplot2::ggplot(
  data = penguins,
  mapping = ggplot2::aes(
    x = .data[["flipper_length_mm"]], 
    y = .data[["body_mass_g"]], 
    color = .data[["island"]])
) +
  ggplot2::geom_point() +
  ggplot2::geom_smooth(se = FALSE)

```

## Exercise 2.2.5

What is the output difference between these two codes ? There is no difference.

:::: {.columns}

::: {.column width="50%"}

```{r}
#| echo: true

ggplot2::ggplot(
  data = penguins,
  mapping = ggplot2::aes(
    x = .data[["flipper_length_mm"]], 
    y = .data[["body_mass_g"]])
) +
  ggplot2::geom_point() +
  ggplot2::geom_smooth()
```

:::

::: {.column width="50%"}

```{r}
#| echo: true

ggplot2::ggplot() + 
ggplot2::geom_point(
  data = penguins,
  mapping = ggplot2::aes(
      x = .data[["flipper_length_mm"]], 
      y = .data[["body_mass_g"]])
) +
ggplot2::geom_smooth(
  data = penguins,
  mapping = ggplot2::aes(
      x = .data[["flipper_length_mm"]], 
      y = .data[["body_mass_g"]])
  )
```

:::

::::

## `ggplot2` calls

There is a concise way of using ggplot2 code to that saves typing. In general, we want to reduce the amount of extra text to make it easier to compare simialr codes.

:::: {.columns}

::: {.column width="50%"}

```{r}
#| echo: true
#| eval: false

ggplot2::ggplot(
  data = penguins,
  mapping = ggplot2::aes(
    x = flipper_length_mm, 
    y = body_mass_g)) +
  ggplot2::geom_point()
```

:::

::: {.column width="50%"}

```{r}
#| echo: true
#| eval: false

penguins |> 
  ggplot2::ggplot(
    ggplot2::aes(
      x = flipper_length_mm,
      y = body_mass_g)) + 
  ggplot2::geom_point()
```

:::

::::

## `ggplot2` calls

When is `flipper_length_mm` and `body_mass_g` a variable or column name ? We can use `.data` to differentiate them.

:::: {.columns}

::: {.column width="50%"}

```{r}
#| echo: true
#| error: true

flipper_length_mm = "Flipper Length in mm"
body_mass_g = "Body Mass in g"

penguins |> 
  ggplot2::ggplot(
    ggplot2::aes(
      x = flipper_length_mm,
      y = body_mass_g)) + 
  ggplot2::geom_point() +
  ggplot2::labs(
    x = flipper_length_mm,
    y = body_mass_g
  )
```

:::

::: {.column width="50%"}

```{r}
#| echo: true

flipper_length_mm = "Flipper Length in mm"
body_mass_g = "Body Mass in g"

penguins |> 
  ggplot2::ggplot(
    ggplot2::aes(
      x = .data[["flipper_length_mm"]],
      y = .data[["body_mass_g"]])) + 
  ggplot2::geom_point() +
  ggplot2::labs(
    x = flipper_length_mm,
    y = body_mass_g
  )
```

:::

::::

## Visualising Distributions

For categorical variables, we can view the distribution using bar charts.

```{r}
#| echo: true
#| warning: true
#| output-location: column

ggplot2::ggplot(
  data = penguins,
  mapping = ggplot2::aes(
     x = species
    )
) + 
ggplot2::geom_bar()

```

## Visualising Distributions

To arrange them based on frequencies, we can use `fct_infreq` to convert the categorical variable to a factor and reorder the level of the factor based on the frequencies.

```{r}
#| echo: true
#| warning: true
#| output-location: column

ggplot2::ggplot(
  data = penguins,
  mapping = ggplot2::aes(
     x = forcats::fct_infreq(species)
    )
) + 
ggplot2::geom_bar()

```

## Visualising Distributions

For numerical variables, we can view the distribution using histograms.

```{r}
#| echo: true
#| warning: true
#| output-location: column

ggplot2::ggplot(
  data = penguins,
  mapping = ggplot2::aes(
     x = body_mass_g
    )
) + 
ggplot2::geom_histogram(
  binwidth = 200)

```

## Visualising Distributions

We may need to adjust the `binwidth` argument if necessary.

```{r}
#| echo: true
#| warning: true
#| output-location: column

ggplot2::ggplot(
  data = penguins,
  mapping = ggplot2::aes(
     x = body_mass_g
    )
) + 
ggplot2::geom_histogram(
  binwidth = 20)

```

## Visualising Distributions

We may need to adjust the `binwidth` argument if necessary.

```{r}
#| echo: true
#| warning: true
#| output-location: column

ggplot2::ggplot(
  data = penguins,
  mapping = ggplot2::aes(
     x = body_mass_g
    )
) + 
ggplot2::geom_histogram(
  binwidth = 2000)

```

## Visualising Distributions

Alternatively, we can view the distribution using density plot.

```{r}
#| echo: true
#| warning: true
#| output-location: column

ggplot2::ggplot(
  data = penguins,
  mapping = ggplot2::aes(
     x = body_mass_g
    )
) + 
ggplot2::geom_density()

```

## Exercise 2.4.3

Make a bar plot of species of penguins, where you assign species to the y aesthetic (instead of x). How is this plot different?

:::: {.columns}

::: {.column width="50%"}

```{r}
#| echo: true

ggplot2::ggplot(
  data = penguins,
  mapping = ggplot2::aes(
    x = .data[["species"]])
) +
  ggplot2::geom_bar()
```

:::

::: {.column width="50%"}

```{r}
#| echo: true

ggplot2::ggplot(
  data = penguins,
  mapping = ggplot2::aes(
    y = .data[["species"]])
) +
  ggplot2::geom_bar()
```

:::

::::

## Exercise 2.4.3

Which aesthetic, color or fill, is more useful for changing the color of bars?

:::: {.columns}

::: {.column width="50%"}

```{r}
#| echo: true

ggplot2::ggplot(
  data = penguins,
  mapping = ggplot2::aes(
    x = .data[["species"]])
) +
  ggplot2::geom_bar(
    color = "green"
  )
```

:::

::: {.column width="50%"}

```{r}
#| echo: true

ggplot2::ggplot(
  data = penguins,
  mapping = ggplot2::aes(
    x = .data[["species"]])
) +
  ggplot2::geom_bar(
    fill = "green"
  )
```

:::

::::

## Exercise 2.4.3

What does the bins argument in `geom_histogram` do?

:::: {.columns}

::: {.column width="50%"}

```{r}
#| echo: true

ggplot2::ggplot(
  data = penguins,
  mapping = ggplot2::aes(
    x = .data[["body_mass_g"]])
) + 
ggplot2::geom_histogram(
  color = "green",
  bins = 5)
```

:::

::: {.column width="50%"}

```{r}
#| echo: true

ggplot2::ggplot(
  data = penguins,
  mapping = ggplot2::aes(
    x = .data[["body_mass_g"]])
) + 
ggplot2::geom_histogram(
  color = "green",
  bins = 10)
```

:::

::::

## Exercise 2.4.3

Make a histogram of the `carat` variable in the `diamonds` dataset that is available when you load the tidyverse package. Experiment with different binwidths. What binwidth reveals the most interesting patterns?

:::: {.columns}

::: {.column width="50%"}

```{r}
#| echo: true

ggplot2::ggplot(
  data = diamonds,
  mapping = ggplot2::aes(
    x = .data[["carat"]])
) + 
ggplot2::geom_histogram(
  color = "green",
  binwidth = 1)
```

:::

::: {.column width="50%"}

```{r}
#| echo: true

ggplot2::ggplot(
  data = diamonds,
  mapping = ggplot2::aes(
    x = .data[["carat"]])
) + 
ggplot2::geom_histogram(
  color = "green",
  binwidth = 0.01)
```

:::

::::

## Visualising Relationships

We can use a side-by-side boxplot to view the relationship between a numerical and a categorical variable.

```{r}
#| echo: true
#| warning: true
#| output-location: column

ggplot2::ggplot(
  data = penguins,
  mapping = ggplot2::aes(
     x = species, 
     y = body_mass_g
    )
) + 
ggplot2::geom_boxplot()

```

## Visualising Relationships

Alternatively, we can view the distribution using density plot. We use `linewidth = 0.75` to make the lines stand out a bit more against the background.

```{r}
#| echo: true
#| warning: true
#| output-location: column

ggplot2::ggplot(
  data = penguins,
  mapping = ggplot2::aes(
     x = body_mass_g, 
     color = species
    )
) + 
ggplot2::geom_density(
  linewidth = 0.75
)
```

## Visualising Relationships

Additionally, we can set `fill = species` and use `alpha` to add transparency to the filled density curve.

```{r}
#| echo: true
#| warning: true
#| output-location: column

ggplot2::ggplot(
  data = penguins,
  mapping = ggplot2::aes(
     x = body_mass_g, 
     color = species,
     fill = species
    )
) + 
ggplot2::geom_density(
  linewidth = 0.75,
  alpha = 0.5
)
```

## Visualising Relationships

Stacked bar plots are useful to visualize the relationship between two categorical variables.

```{r}
#| echo: true
#| warning: true
#| output-location: column

ggplot2::ggplot(
  data = penguins,
  mapping = ggplot2::aes(
     x = island, 
     fill = species
    )
) + 
ggplot2::geom_bar()
```

## Visualising Relationships

By setting `position = "fill"`, we create a relative frequency plot.

```{r}
#| echo: true
#| warning: true
#| output-location: column

ggplot2::ggplot(
  data = penguins,
  mapping = ggplot2::aes(
     x = island, 
     fill = species
    )
) + 
ggplot2::geom_bar(
  position = "fill"
)
```

## Visualising Relationships

Scatterplots are useful to visualize the relationship between two numerical variables.

```{r}
#| echo: true
#| warning: true
#| output-location: column

ggplot2::ggplot(
  data = penguins,
  mapping = ggplot2::aes(
     x = flipper_length_mm, 
     y = body_mass_g
    )
) + 
ggplot2::geom_point()
```

## Visualising Relationships

To visualize the relationship between three or more variables. Things get a bit tricky. For example, we can let colors of points represent species and the shapes of points represent islands but it is hard to see anything meaningful.

```{r}
#| echo: true
#| warning: true
#| output-location: column

ggplot2::ggplot(
  data = penguins,
  mapping = ggplot2::aes(
     x = flipper_length_mm, 
     y = body_mass_g
    )
) + 
ggplot2::geom_point(
  mapping = ggplot2::aes(
     color = species, 
     shape = island
    )
)
```

## Visualising Relationships

To counter this issue we can split plots into different facets, subplots that each display one subset of the data, using `facet_wrap`

```{r}
#| echo: true
#| warning: true
#| output-location: column

ggplot2::ggplot(
  data = penguins,
  mapping = ggplot2::aes(
     x = flipper_length_mm, 
     y = body_mass_g
    )
) + 
ggplot2::geom_point(
  mapping = ggplot2::aes(
     color = species, 
     shape = species
    )
) +
ggplot2::facet_wrap(
  ggplot2::vars(island)
)
```

## Exercise 2.5.5

Which variables in mpg are categorical? Which variables are numerical? How can you see this information when you run mpg? Unfortunately `?mpg` is not so clear.

```{r}
#| echo: true
#| eval: false

?mpg

```

```{=html}
<iframe width="1000" height="400" src="https://ggplot2.tidyverse.org/reference/mpg.html" title="mpg Documentation" ></iframe>
```

## Exercise 2.5.5

We can use `dplyr::glimpse` to identify which variables are categorical and numeric.

```{r}
#| echo: true

dplyr::glimpse(mpg)

```

## Exercise 2.5.5

Make a scatterplot of `hwy` vs. `displ` using the mpg data frame

```{r}
#| echo: true
#| warning: true
#| output-location: column

ggplot2::ggplot(
  data = mpg,
  mapping = ggplot2::aes(
    x = .data[["displ"]], 
    y = .data[["hwy"]])
) +
  ggplot2::geom_point() +
ggplot2::theme(
  axis.title.y = ggplot2::element_text(angle = 0)
) +
ggplot2::labs(
    x = "Engine displacement in litres", 
    y = "Highway miles\nper gallon"
  ) 

```

## Exercise 2.5.5

Next, map a third, numerical/categorical variable to color, then size, then both color and size, then shape

::: {.panel-tabset}

### Color (cty)

```{r}
#| echo: true
#| warning: true
#| output-location: column

ggplot2::ggplot(
  data = mpg,
  mapping = ggplot2::aes(
    x = .data[["displ"]], 
    y = .data[["hwy"]],
    color = .data[["cty"]])
) +
  ggplot2::geom_point() +
ggplot2::theme(
  axis.title.y = ggplot2::element_text(angle = 0)
) +
ggplot2::labs(
    x = "Engine displacement in litres", 
    y = "Highway miles\nper gallon",
    colour = "City miles\nper gallon"
  ) 

```

### Color (class)

```{r}
#| echo: true
#| warning: true
#| output-location: column

ggplot2::ggplot(
  data = mpg,
  mapping = ggplot2::aes(
    x = .data[["displ"]], 
    y = .data[["hwy"]],
    color = .data[["class"]])
) +
  ggplot2::geom_point() +
ggplot2::theme(
  axis.title.y = ggplot2::element_text(angle = 0)
) +
ggplot2::labs(
    x = "Engine displacement in litres", 
    y = "Highway miles\nper gallon",
    color = "Type of Car"
  ) 

```

### Size (cty)

```{r}
#| echo: true
#| warning: true
#| output-location: column

ggplot2::ggplot(
  data = mpg,
  mapping = ggplot2::aes(
    x = .data[["displ"]], 
    y = .data[["hwy"]],
    size = .data[["cty"]])
) +
  ggplot2::geom_point() +
ggplot2::theme(
  axis.title.y = ggplot2::element_text(angle = 0)
) +
ggplot2::labs(
    x = "Engine displacement in litres", 
    y = "Highway miles\nper gallon",
    colour = "City miles\nper gallon"
  ) 

```

### Size (class)

```{r}
#| echo: true
#| warning: true
#| output-location: column

ggplot2::ggplot(
  data = mpg,
  mapping = ggplot2::aes(
    x = .data[["displ"]], 
    y = .data[["hwy"]],
    size = .data[["class"]])
) +
  ggplot2::geom_point() +
ggplot2::theme(
  axis.title.y = ggplot2::element_text(angle = 0)
) +
ggplot2::labs(
    x = "Engine displacement in litres", 
    y = "Highway miles\nper gallon",
    color = "Type of Car"
  ) 

```

:::

## Exercise 2.5.5

Next, map a third, numerical/categorical variable to color, then size, then both color and size, then shape

::: {.panel-tabset}

### Color and Size (cty)

```{r}
#| echo: true
#| warning: true
#| output-location: column

ggplot2::ggplot(
  data = mpg,
  mapping = ggplot2::aes(
    x = .data[["displ"]], 
    y = .data[["hwy"]],
    color = .data[["cty"]],
    size = .data[["cty"]])
) +
  ggplot2::geom_point() +
ggplot2::theme(
  axis.title.y = ggplot2::element_text(angle = 0)
) +
ggplot2::labs(
    x = "Engine displacement in litres", 
    y = "Highway miles\nper gallon",
    colour = "City miles\nper gallon"
  ) 

```

### Color and Size (class)

```{r}
#| echo: true
#| warning: true
#| output-location: column

ggplot2::ggplot(
  data = mpg,
  mapping = ggplot2::aes(
    x = .data[["displ"]], 
    y = .data[["hwy"]],
    size = .data[["class"]],
    size = .data[["cty"]])
) +
  ggplot2::geom_point() +
ggplot2::theme(
  axis.title.y = ggplot2::element_text(angle = 0)
) +
ggplot2::labs(
    x = "Engine displacement in litres", 
    y = "Highway miles\nper gallon",
    color = "Type of Car"
  ) 

```

:::

## Exercise 2.5.5

Next, map a third, numerical/categorical variable to color, then size, then both color and size, then shape

::: {.panel-tabset}

### Shape (cty)

```{r}
#| echo: true
#| error: true
#| warning: true
#| output-location: column

ggplot2::ggplot(
  data = mpg,
  mapping = ggplot2::aes(
    x = .data[["displ"]], 
    y = .data[["hwy"]],
    shape = .data[["cty"]])
) +
  ggplot2::geom_point() +
ggplot2::theme(
  axis.title.y = ggplot2::element_text(angle = 0)
) +
ggplot2::labs(
    x = "Engine displacement in litres", 
    y = "Highway miles\nper gallon",
    colour = "City miles\nper gallon"
  ) 

```

### Shape (class)

```{r}
#| echo: true
#| warning: true
#| output-location: column

ggplot2::ggplot(
  data = mpg,
  mapping = ggplot2::aes(
    x = .data[["displ"]], 
    y = .data[["hwy"]],
    shape = .data[["class"]])
) +
  ggplot2::geom_point() +
ggplot2::theme(
  axis.title.y = ggplot2::element_text(angle = 0)
) +
ggplot2::labs(
    x = "Engine displacement in litres", 
    y = "Highway miles\nper gallon",
    color = "Type of Car"
  ) 

```

### Shape (class) Fixed

See [stackoverflow](https://stackoverflow.com/questions/16813278/cycling-through-point-shapes-when-more-than-6-factor-levels)

```{r}
#| echo: true
#| warning: true
#| output-location: column

ggplot2::ggplot(
  data = mpg,
  mapping = ggplot2::aes(
    x = .data[["displ"]], 
    y = .data[["hwy"]],
    shape = .data[["class"]])
) +
  ggplot2::geom_point() +
ggplot2::scale_shape_manual(values= c(0:7)) +
ggplot2::theme(
  axis.title.y = ggplot2::element_text(angle = 0)
) +
ggplot2::labs(
    x = "Engine displacement in litres", 
    y = "Highway miles\nper gallon",
    color = "Type of Car"
  ) 

```

:::

## Exercise 2.5.5

In the scatterplot of `hwy` vs. `displ`, what happens if you map a third variable to `linewidth`?

::: {.panel-tabset}

### Lucky case

```{r}
#| echo: true
#| warning: true
#| output-location: column

ggplot2::ggplot(
  data = mpg,
  mapping = ggplot2::aes(
    x = .data[["displ"]], 
    y = .data[["hwy"]],
    linewidth = .data[["year"]])
) +
  ggplot2::geom_point()

```

### Unlucky case

```{r}
#| echo: true
#| warning: true
#| output-location: column

ggplot2::ggplot(
  data = mpg,
  mapping = ggplot2::aes(
    x = .data[["displ"]], 
    y = .data[["hwy"]],
    linewidth = .data[["year"]])
) +
  ggplot2::geom_point() +
  ggplot2::geom_smooth()

```

### Oh No case

```{r}
#| echo: true
#| warning: true
#| output-location: column

ggplot2::ggplot(
  data = mpg,
  mapping = ggplot2::aes(
    x = .data[["displ"]], 
    y = .data[["hwy"]],
    linewidth = .data[["class"]])
) +
  ggplot2::geom_point() +
  ggplot2::geom_smooth()

```

:::

## Exercise 2.5.5

What happens if you map the same variable to multiple aesthetics?

::: {.panel-tabset}

### Lucky case

```{r}
#| echo: true
#| warning: true
#| output-location: column

ggplot2::ggplot(
  data = mpg,
  mapping = ggplot2::aes(
    x = .data[["class"]], 
    colour = .data[["class"]],
    fill = .data[["class"]])
  
) +
  ggplot2::geom_bar() +
ggplot2::theme(
  axis.title.y = ggplot2::element_text(angle = 0)
) +
ggplot2::labs(
    x = "Type of Car", 
    y = "Count",
    color = "Type of Car",
    fill = "Type of Car"
  ) 

```

### Unlucky case

```{r}
#| echo: true
#| warning: true
#| output-location: column

ggplot2::ggplot(
  data = mpg,
  mapping = ggplot2::aes(
    x = .data[["cty"]], 
    y = .data[["cty"]],
    colour = .data[["cty"]])
  
) +
  ggplot2::geom_point() +
ggplot2::theme(
  axis.title.y = ggplot2::element_text(angle = 0)
) +
ggplot2::labs(
    x = "City miles per gallon", 
    y = "City miles\nper gallon",
    color = "City miles\nper gallon",
  ) 

```

:::

## Exercise 2.5.5

Make a scatterplot of `bill_depth_mm` vs. `bill_length_mm` and color the points by `species`. What does adding coloring by species reveal about the relationship between these two variables? What about faceting by species?

::: {.panel-tabset}

### No facet

```{r}
#| echo: true
#| warning: true
#| output-location: column

ggplot2::ggplot(
  data = penguins,
  mapping = ggplot2::aes(
    x = .data[["bill_length_mm"]], 
    y = .data[["bill_depth_mm"]],
    colour = .data[["species"]])
  
) +
  ggplot2::geom_point() +
ggplot2::theme(
  axis.title.y = ggplot2::element_text(angle = 0)
) +
ggplot2::labs(
    title = "Bill Depth(mm) vs Bill Length (mm)",
    subtitle = glue::glue("
        \U2022 Adelie has longer bill depth but shorter bill length than Gentoo.
        \U2022 Chinstrap has longer bill depth and length than Adelie and Gentoo.
    "),
    x = "Bill Length (mm)", 
    y = "Bill Depth\n(mm)",
    color = "Species",
  ) 

```

### With facet

```{r}
#| echo: true
#| warning: true
#| output-location: column

ggplot2::ggplot(
  data = penguins,
  mapping = ggplot2::aes(
    x = .data[["bill_length_mm"]], 
    y = .data[["bill_depth_mm"]],
    colour = .data[["species"]])
  
) +
  ggplot2::geom_point() +
  ggplot2::facet_wrap(
    facets = ggplot2::vars(.data[["species"]])
) +
ggplot2::theme(
  axis.title.y = ggplot2::element_text(angle = 0)
) +
ggplot2::labs(
    title = "Bill Depth(mm) vs Bill Length (mm)",
    subtitle = glue::glue("
        \U2022 Adelie has longer bill depth but shorter bill length than Gentoo.
        \U2022 Chinstrap has longer bill depth and length than Adelie and Gentoo.
    "),
    x = "Bill Length (mm)", 
    y = "Bill Depth\n(mm)",
    color = "Species",
  ) 

```

:::

## Exercise 2.5.5

Why does the following yield two separate legends? How would you fix it to combine the two legends?

::: {.panel-tabset}

### Two Legend

```{r}
#| echo: true
#| warning: true
#| output-location: column

ggplot2::ggplot(
  data = penguins,
  mapping = ggplot2::aes(
    x = .data[["bill_length_mm"]], 
    y = .data[["bill_depth_mm"]],
    colour = .data[["species"]],
    shape = .data[["species"]])
  
) +
  ggplot2::geom_point() +
ggplot2::theme(
  axis.title.y = ggplot2::element_text(angle = 0)
) +
ggplot2::labs(
    title = "Bill Depth(mm) vs Bill Length (mm)",
    subtitle = glue::glue("
        \U2022 Adelie has longer bill depth but shorter bill length than Gentoo.
        \U2022 Chinstrap has longer bill depth and length than Adelie and Gentoo.
    "),
    x = "Bill Length (mm)", 
    y = "Bill Depth\n(mm)",
    color = "Species",
  ) 

```

### Two Legend Fixed

```{r}
#| echo: true
#| warning: true
#| output-location: column

ggplot2::ggplot(
  data = penguins,
  mapping = ggplot2::aes(
    x = .data[["bill_length_mm"]], 
    y = .data[["bill_depth_mm"]],
    colour = .data[["species"]],
    shape = .data[["species"]])
  
) +
  ggplot2::geom_point() +
ggplot2::theme(
  axis.title.y = ggplot2::element_text(angle = 0)
) +
ggplot2::labs(
    title = "Bill Depth(mm) vs Bill Length (mm)",
    subtitle = glue::glue("
        \U2022 Adelie has longer bill depth but shorter bill length than Gentoo.
        \U2022 Chinstrap has longer bill depth and length than Adelie and Gentoo.
    "),
    x = "Bill Length (mm)", 
    y = "Bill Depth\n(mm)",
    color = "Species",
    shape = "Species"
  ) 

```

:::

## Exercise 2.5.5

Create the two following stacked bar plots. Which question can you answer with the first one? Which question can you answer with the second one?

::: {.panel-tabset}

### First 

```{r}
#| echo: true
#| warning: true
#| output-location: column

ggplot2::ggplot(
  data = penguins,
  mapping = ggplot2::aes(
    x = .data[["island"]],
    fill = .data[["species"]])
) +
  ggplot2::geom_bar(
    position = "fill"
  ) +
ggplot2::theme(
  axis.title.y = ggplot2::element_text(angle = 0)
) +
ggplot2::labs(
    title = "Proportion of Species In A Given Island",
    subtitle = glue::glue("
        \U2022 Torgersen only has Adelie.
        \U2022 Dream has similar proportions of Adelie and Chinstrap living there.
        \U2022 Biscoe has 1/4 Adelie and 3/4 Gentoo living there.
    "),
    x = "Island", 
    y = "Proportion",
    fill = "Species"
  ) 
```

### Second

```{r}
#| echo: true
#| warning: true
#| output-location: column

ggplot2::ggplot(
  data = penguins,
  mapping = ggplot2::aes(
    x = .data[["species"]],
    fill = .data[["island"]])
) +
  ggplot2::geom_bar(
    position = "fill"
  ) +
ggplot2::theme(
  axis.title.y = ggplot2::element_text(angle = 0)
) +
ggplot2::labs(
    title = "Island habitat distribution for each species",
    subtitle = glue::glue("
        \U2022 Adelie lives in all three islands at similar proportions.
        \U2022 Chinstrap only lives in Dream.
        \U2022 Gentoo only lives in Biscoe.
    "),
    x = "Species", 
    y = "Proportion",
    fill = "Island"
  ) 
```

:::

## Save Plots

Use `ggsave` to save a `ggplot` plot 

```{r}
#| echo: true
#| eval: false

penguin_plot <- ggplot2::ggplot(
  data = penguins,
  mapping = ggplot2::aes(
     x = flipper_length_mm, 
     y = body_mass_g
    )
) + 
ggplot2::geom_point()

ggplot2::ggsave(
  filename = "penguin-plot.png",
  plot = penguin_plot,
  width = 5, 
  height = 4)
```

## Exercise 2.6.1

Run the following lines of code. Which of the two plots is saved as mpg-plot.png? Why?

```{r}
#| echo: true
#| eval: false

penguin_plot <- ggplot2::ggplot(
  data = mpg,
  mapping = ggplot2::aes(
     x = .data[["class"]]
    )
) + 
ggplot2::geom_bar()

penguin_plot <- ggplot2::ggplot(
  data = mpg,
  mapping = ggplot2::aes(
     x = .data[["cty"]],
     y = .data[["hwy"]]
    )
) + 
ggplot2::geom_point()

ggplot2::ggsave(
  filename = "mpg-plot.png"
)
```

## Exercise 2.6.1

It is the second plot because by default value of the `plot` argument, `ggsave` saves the last plot displayed.

```{r}
#| echo: true
#| eval: false

?ggplot2::ggsave

```

```{=html}
<iframe width="1000" height="400" src="https://ggplot2.tidyverse.org/reference/ggsave.html" title="ggsave Documentation" ></iframe>
```

## Exercise 2.6.1

What do you need to change in the code above to save the plot as a PDF instead of a PNG?

```{r}
#| echo: true
#| eval: false

ggplot2::ggsave(
  filename = "mpg-plot.pdf"
)

ggplot2::ggsave(
  filename = "no_file_extension",
  device = "pdf"
)

```

```{=html}
<iframe width="1000" height="350" src="https://ggplot2.tidyverse.org/reference/ggsave.html" title="ggsave Documentation" ></iframe>
```

## Exercise 2.6.1

How could you find out what types of image files would work in `ggsave()`? Use the `device` argument.

```{r}
#| echo: true
#| eval: false

ggplot2::ggsave(
  filename = "no_file_extension",
  device = "pdf"
)

```

```{=html}
<iframe width="1000" height="400" src="https://ggplot2.tidyverse.org/reference/ggsave.html" title="ggsave Documentation" ></iframe>
```

## Common Problems

Spelling mistakes (Pics from [Allison Horst](https://allisonhorst.com/))

![](images/Spelling.png){fig-alt="A comic showing a Crocodile programmer getting angry that because he does not know the error was caused by a spelling mistake until a Flamingo programmer steps in to help."}

## Common Problems

Plus in wrong place

:::: {.columns}

::: {.column width="50%"}

```{r}
#| echo: true
#| error: true

ggplot2::ggplot(data = mpg) 
+ ggplot2::geom_point(
  mapping = ggplot2::aes(x = displ, y = hwy))

```

:::

::: {.column width="50%"}

```{r}
#| echo: true
#| error: true

ggplot2::ggplot(data = mpg) + 
  ggplot2::geom_point(
    mapping = ggplot2::aes(x = displ, y = hwy))

```

:::

::::

## Summary

Chapter 2 helps you learn the basics of `ggplot2`. More `ggplot2` related techniques will be covered on Chapter 10 to Chapter 12.

The rest of my slides are some thorny "issues" that I have faced when using `ggplot2` and how I handle them (after hours of searching).

## Extra

Not enough discrete colours. Check out `ggthemes::tableau_color_pal`

```{r}
#| echo: true

scales::show_col(
  colours = ggthemes::tableau_color_pal("Classic 20")(20), 
  ncol = 6)

```

## Extra

Colour-blind friendly discrete colours. Check out `ggthemes::colorblind_pal` for [Okabe Ito](https://mikemol.github.io/technique/colorblind/2018/02/11/color-safe-palette.html) colour palette. But 8 may not always be sufficient ...

```{r}
#| echo: true

scales::show_col(
  colours = ggthemes::colorblind_pal()(8), 
  ncol = 4)

```

## Extra

Both colour-blind friendly discrete and continunus colours. Check out [microshades](https://github.com/KarstensLab/microshades)

```{=html}
<iframe width="1000" height="500" src="https://karstenslab.github.io/microshades/" title="microshades homepage" ></iframe>
```

## Extra

Both colour-blind friendly discrete and continunus colours. Check out [microshades](https://github.com/KarstensLab/microshades)

```{=html}
<iframe width="1000" height="500" src="https://www.youtube.com/embed/iVIfLW2VU5M" frameborder="0" allowfullscreen></iframe>
```

## Extra

Not enough shapes. Check out [`ggstars`](https://github.com/xiangpin/ggstar/)

```{=html}
<iframe width="1000" height="500" src="https://cran.r-project.org/web/packages/ggstar/vignettes/ggstar.html" title="ggstar homepage" ></iframe>
```

## Extra

Need to label your bar charts. Check out [`ggfittext`](https://github.com/wilkox/ggfittext)

```{=html}
<iframe width="1000" height="500" src="https://wilkox.org/ggfittext/" title="ggfittext homepage" ></iframe>
```

## Extra

Need to label your bar charts quickly. Consider [`ggfittext`](https://github.com/wilkox/ggfittext)

```{r}
#| echo: true
#| warning: true
#| output-location: column

island_count <- penguins |>
  dplyr::reframe(count = dplyr::n(), .by = c("species"))

ggplot2::ggplot(
  data = island_count,
  mapping = ggplot2::aes(
    x = .data[["species"]],
    y = .data[["count"]],
    fill = .data[["species"]]),
) +
  ggplot2::geom_col() +
  ggfittext::geom_bar_text() +
ggplot2::theme(
  axis.title.y = ggplot2::element_text(angle = 0)
)
```

## Extra

Need to add text annotation. Consider [`ggtext`](https://github.com/wilkelab/ggtext/).

```{=html}
<iframe width="1000" height="500" src="https://wilkelab.org/ggtext/" title="ggtext homepage" ></iframe>
```

## Extra

Here is my example.

```{r}
#| echo: true
#| warning: true
#| output-location: column

island_count <- penguins |>
  dplyr::reframe(count = dplyr::n(), .by = c("species"))

species_colours <- list("Adelie" = "#D55E00",
                        "Chinstrap" = "#009E73",
                        "Gentoo" = "#0072B2")

ggplot2::ggplot(
  data = island_count,
  mapping = ggplot2::aes(
    x = .data[["species"]],
    y = .data[["count"]],
    fill = .data[["species"]]),
) +
  ggplot2::geom_col() +
  ggfittext::geom_bar_text() +
  ggplot2::scale_fill_manual(values = species_colours) +
ggplot2::theme(
  plot.subtitle = ggtext::element_markdown(),
  axis.title.y = ggtext::element_markdown(angle = 0)
) +
ggplot2::labs(
    x = "Islands",
    y = "Count",
    title = "Penguin Species",
    subtitle = glue::glue("
    The penguin data has a total of {island_count$count[island_count$species == \"Adelie\"]} <span style=\"color:{species_colours$Adelie}\">**Adelie**</span>, {island_count$count[island_count$species == \"Chinstrap\"]} <span style=\"color:{species_colours$Chinstrap}\">**Chinstrap**</span> and {island_count$count[island_count$species == \"Gentoo\"]} <span style=\"color:{species_colours$Gentoo}\">**Gentoo**</span>
    ")
  )
```

## Extra

See [Royal Statistical Society Best Practices for Data Visualisation](https://royal-statistical-society.github.io/datavisguide/docs/styling.html) and [Cara Thompsom's NHRS 2022 Talk](https://www.cararthompson.com/talks/nhsr2022-level-up/) for more `ggtext` examples.

:::: {.columns}

::: {.column width="50%"}

```{=html}
<iframe width="1000" height="500" src="https://royal-statistical-society.github.io/datavisguide/docs/styling.html" title="RSS example" ></iframe>
```

:::

::: {.column width="50%"}

```{=html}
<iframe width="1000" height="500" src="https://www.cararthompson.com/talks/nhsr2022-level-up/" title="Cara Thompsom NHRS 2022 Talk" ></iframe>
```

:::

::::

## Extra

Learn from `ggplot2` mishaps. See [Kara Woo's RStudio 2020 Conference talk](https://www.youtube.com/watch?v=izV-qK3nlhA).

```{=html}
<iframe width="1000" height="500" src="https://www.youtube.com/embed/izV-qK3nlhA" frameborder="0" allowfullscreen></iframe>
```
